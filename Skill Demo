use vrg;

/*	Simple Stored Procedure														*/

select *from customer;
DELIMITER $$
CREATE PROCEDURE GetCustomerInfo()
	BEGIN
		select *from customer;
	END $$
DELIMITER ;
CALL GetCustomerInfo();



/*	Parameterized Stored Procedure														*/

DELIMITER $$
CREATE PROCEDURE GetCustomerInfoByState(
	IN StateName VARCHAR(2),
    IN CityName VARCHAR(30))
	BEGIN
		select *from customer where State=StateName;
	END $$
DELIMITER ;
CALL GetCustomerInfoByState('GA');



/*	Use of Cursor													*/

select EmailAddress from customer;
select *from customer;
drop procedure createEmailList;

DELIMITER $$
CREATE PROCEDURE createEmailList (
    INOUT emailList varchar(4000)
)
BEGIN
    DECLARE finished INTEGER DEFAULT 0;
    DECLARE email varchar(100) DEFAULT "";
 
    -- declare cursor for employee email
    DEClARE curEmail 
        CURSOR FOR 
            select EmailAddress from customer;
 
    -- declare NOT FOUND handler
    DECLARE CONTINUE HANDLER 
        FOR NOT FOUND SET finished = 1;
 
    OPEN curEmail;
		getEmail: LOOP
			FETCH curEmail INTO email;
			IF finished = 1 THEN 
				LEAVE getEmail;
			END IF;
			-- build email list
			SET emailList = CONCAT(email,";",emailList);
		END LOOP getEmail;
    CLOSE curEmail;
 
END$$
DELIMITER ;

SET @emailList = ""; 
CALL createEmailList(@emailList); 
SELECT @emailList;



/*	Loops														*/

DROP PROCEDURE LoopDemo;
 
DELIMITER $$
CREATE PROCEDURE LoopDemo()
BEGIN
    DECLARE x  INT;  
    DECLARE str  VARCHAR(255);
    DECLARE r int default 0;
        
    SET x = 1;
    SET str =  '';
        
    loop_label:  LOOP
        IF  x > 10 THEN 
            LEAVE  loop_label;
        END  IF;
            
        
        SET r=x mod 2;
        SET  x = x + 1;
        IF  (r<>1) THEN
            ITERATE  loop_label;
        ELSE
            SET  str = CONCAT(str,x,',');
        END  IF;
        
    END LOOP;
    SELECT str;
END$$
DELIMITER ;

CALL LoopDemo();


/* Trigger: Update Before*/

create table customerAudit(
	id int auto_increment not null primary key,
    CustomerId int not null,
    LastName varchar(50),
    ChangeDate datetime,
    action varchar(30)
);
select *from customerAudit;
select *from customer;

create trigger customerUpdateBefore
	before update on customer
    for each row
    insert into customeraudit 
    set action='update',CustomerID=OLD.CustomerID,
    LastName=OlD.LastName,ChangeDate=NOW();
show triggers;

update customer set FirstName='Trump' where CustomerID=1001;

/* track the last password change time for all customers */

/* After insert*/
create table memberInfo(
id int auto_increment not null primary key,
memberName varchar(100) not null,
email varchar(100) not null,
dateofbirth varchar(50)
);

insert into memberInfo(memberName,email,dateofbirth)
values('Tom','tom@apsu.edu','01-01-1991');
insert into memberInfo(memberName,email)
values('Tom','tom@apsu.edu');

insert into memberInfo(memberName,email)
values('mir','mir@apsu.edu');
select *from memberInfo;

create table reminders(
reminderId int auto_increment not null,
id int,
message varchar(300) not null,
primary key(reminderId,id)
);
select *from reminders;

DELIMITER $$
create trigger memberAfterInsert
	after insert on memberInfo
    for each row
    begin
		if New.dateofbirth is null then
			insert into reminders(id, message)
			values(new.id, CONCAT('Hi', new.memberName,', please update your date of birth'));
		end if;
    END $$
DELIMITER ;


/* BEFORE DELETE */

CREATE TABLE Salaries (
    employeeNumber INT PRIMARY KEY,
    validFrom DATE NOT NULL,
    amount DEC(12 , 2 ) NOT NULL DEFAULT 0
);
INSERT INTO salaries(employeeNumber,validFrom,amount)
VALUES
    (1002,'2000-01-01',50000),
    (1056,'2000-01-01',60000),
    (1076,'2000-01-01',70000);
select *from salaries;

CREATE TABLE SalaryArchives (
    id INT PRIMARY KEY AUTO_INCREMENT,
    employeeNumber INT,
    validFrom DATE NOT NULL,
    amount DEC(12 , 2 ) NOT NULL DEFAULT 0,
    deletedAt TIMESTAMP DEFAULT NOW()
);
select *from salaryarchives;
DELIMITER $$
 
CREATE TRIGGER before_salaries_delete
BEFORE DELETE
ON salaries FOR EACH ROW
BEGIN
    INSERT INTO SalaryArchives(employeeNumber,validFrom,amount)
    VALUES(OLD.employeeNumber,OLD.validFrom,OLD.amount);
END$$    
 
DELIMITER ;

DELETE FROM salaries 
WHERE employeeNumber = 1002;

/* After Delete */
DROP TABLE IF EXISTS Salaries;
 
CREATE TABLE Salaries (
    employeeNumber INT PRIMARY KEY,
    salary DECIMAL(10,2) NOT NULL DEFAULT 0
);
select *from salaries;

CREATE TABLE SalaryBudgets(
    total DECIMAL(15,2) NOT NULL
);
select *from salarybudgets;
INSERT INTO SalaryBudgets(total)
SELECT SUM(salary) FROM Salaries;
INSERT INTO Salaries(employeeNumber,salary)
VALUES
    (1002,5000),
    (1056,7000),
    (1076,8000);
    
CREATE TRIGGER after_salaries_delete
	AFTER DELETE
	ON Salaries FOR EACH ROW
		UPDATE SalaryBudgets 
		SET total = total - old.salary;

DELETE FROM Salaries
WHERE employeeNumber = 1002;